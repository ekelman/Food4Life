@model Food4Life.Models.Recipe

<fieldset>
    <legend></legend>
    @Html.ValidationSummary(true)

    <div class="form-group">
        @Html.LabelFor(model => model.category_id, "Category", new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.category_id, ViewBag.category_id_list as SelectList, "Select", new { @id = "CategoryId", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.category_id, "Category is required.")
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.title, "Title", new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.title, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.title, "Title is required")
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.description, "Description", new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.description, new { @class = "form-control" })
            @*@Html.ValidationMessageFor(model => model.description, "Description is required")*@
            @Html.ValidationMessage("Description")
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.details, "Ingredients", new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.details, new { htmlAttributes = new { @class = "form-control textareaeditor", @rows = "20" } })
            @Html.ValidationMessageFor(model => model.details, "Ingredients is required.")
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.details, "Instructions", new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.instructions, new { htmlAttributes = new { @class = "form-control textareaeditor", @rows = "20" } })
            @Html.ValidationMessageFor(model => model.instructions, "Instructions is required.")
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.prep_time, "Prep Time", new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.prep_time, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.prep_time, "Prep Time is required.")
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.cook_time, "Cook Time", new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.cook_time, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.cook_time, "Cook Time is required.")
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.serves, "Serves", new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.serves, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.serves, "Serves is required.")
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Image", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            <div>
                <div>
                    <div class="row">
                        <div class="col-xs-6">
                            <div class="thumbnail">
                                @if (Model != null && Model.thumnail_image != null)
                                {
                                    @Html.Raw("<img src=\"" + Model.thumnail_image.Replace("~", "") + "\" />")
                                }
                                <div class="caption">
                                    <input type="file" id="FileUpload1" name="FileUpload1" class="form-control" />
                                    @Html.ValidationMessage("ErrorImage")
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Ingredients Image", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            <div>
                <div>
                    <div class="row">
                        <div class="col-xs-6">
                            <div class="thumbnail">
                                @if (Model != null && Model.ingredients_thumbnail_image != null)
                                {
                                    @Html.Raw("<img src=\"" + Model.ingredients_thumbnail_image.Replace("~", "") + "\" />")
                                }
                                <div class="caption">
                                    <input type="file" id="FileUpload2" name="FileUpload2" class="form-control" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.show_slider, "Show on Slider", new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.show_slider)
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</fieldset>
